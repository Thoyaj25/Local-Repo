AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 in Private Subnet with MongoDB and Bastion Host

Parameters:
  KeyName:
    Description: EC2 KeyPair to SSH
    Type: AWS::EC2::KeyPair::KeyName

Resources:

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [{ Key: Name, Value: MongoDB-VPC }]

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags: [{ Key: Name, Value: PublicSubnet }]

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags: [{ Key: Name, Value: PrivateSubnet }]

  IGW:
    Type: AWS::EC2::InternetGateway

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref IGW

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  PublicSubnetRouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  BastionSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Bastion SG
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags: [{ Key: Name, Value: BastionSG }]

  PrivateSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MongoDB Private SG
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSG
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          SourceSecurityGroupId: !Ref BastionSG
      Tags: [{ Key: Name, Value: PrivateSG }]

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: ami-0c2b8ca1dad447f8a # Amazon Linux 2 (us-east-1)
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds: [!Ref BastionSG]
      Tags: [{ Key: Name, Value: BastionHost }]

  MongoDBInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: ami-0c2b8ca1dad447f8a
      KeyName: !Ref KeyName
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds: [!Ref PrivateSG]
      Tags: [{ Key: Name, Value: MongoDBInstance }]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          amazon-linux-extras enable mongodb4.0
          yum clean metadata
          yum install -y mongodb-org
          systemctl start mongod
          systemctl enable mongod
          echo "MongoDB Installed and Running" > /tmp/mongo_status.txt

Outputs:
  BastionPublicIP:
    Value: !GetAtt BastionHost.PublicIp
    Description: Use this IP to SSH into the bastion

  MongoPrivateIP:
    Value: !GetAtt MongoDBInstance.PrivateIp
    Description: Use this private IP from the bastion to access MongoDB
